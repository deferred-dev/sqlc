{{define "dbCodeTemplateStd"}}

type Queries struct {
    conn *sqlite.Conn
    pin runtime.Pinner
    beginRead iter
    commit iter
    {{- range .ReadQueries }}
    {{.FieldName}} {{.MethodName}}Stmt
    {{- end}}
}

type WriteTxn struct {
    Queries
    beginWrite iter
    rollback iter
    {{- range .WriteQueries }}
    {{.FieldName}} {{.MethodName}}Stmt
    {{- end}}
}

func (q *Queries) init(conn *sqlite.Conn, isWriteTxn bool) {
    if q.conn != nil {
        panic("Queries already initialized")
    }
    q.conn = conn
    q.beginRead.init(q, "begin", "begin", false)
    q.commit.init(q, "commit", "commit", false)
    if !isWriteTxn {
        runtime.SetFinalizer(q, (*Queries).Close)
    }
}

func (txn *WriteTxn) init(conn *sqlite.Conn) {
    txn.Queries.init(conn, true)
    txn.beginWrite.init(&txn.Queries, "begin immediate", "begin immediate", false)
    txn.rollback.init(&txn.Queries, "rollback", "rollback", false)
    runtime.SetFinalizer(txn, (*WriteTxn).Close)
}

func (q *Queries) BeginRead() (int64, *lib.Error) {
    q.beginRead.Next()
    err := q.beginRead.takeErr()
    q.beginRead.reset()
    if err != nil {
        return 0, err
    }
    return q.GetVersion()
}

func (txn *WriteTxn) BeginWrite() (int64, *lib.Error) {
    txn.beginWrite.Next()
    err := txn.beginWrite.takeErr()
    txn.beginWrite.reset()
    if err != nil {
        return 0, err
    }
    return txn.GetVersion()
}

func (q *Queries) Commit() (*lib.Error) {
    q.pin.Unpin()
    q.commit.Next()
    err := q.commit.takeErr()
    q.commit.reset()
    return err
}

func (txn *WriteTxn) Rollback() (*lib.Error) {
    txn.Queries.pin.Unpin()
    txn.rollback.Next()
    err := txn.rollback.takeErr()
    txn.rollback.reset()
    return err
}

func (q *Queries) Close() *lib.Error {
    if q.conn == nil {
        return nil
    }
    q.pin.Unpin()
    var firstErr *lib.Error
    {{- range .ReadQueries }}
    q.{{.FieldName}}.close()
    firstErr = firstErr.Or(q.{{.FieldName}}.takeErr())
    {{- end}}
    extErr := q.conn.Close()
    q.conn = nil
    if firstErr == nil && extErr != nil {
        firstErr = lib.Wrap(extErr)
    }
    return firstErr
}

func (txn *WriteTxn) Close() *lib.Error {
    if txn.conn == nil {
        return nil
    }
    var firstErr *lib.Error
    {{- range .WriteQueries }}
    txn.{{.FieldName}}.close()
    firstErr = firstErr.Or(txn.{{.FieldName}}.takeErr())
    {{- end}}
    return firstErr.Or(txn.Queries.Close())
}

{{end}}
