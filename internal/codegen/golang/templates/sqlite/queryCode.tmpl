{{define "queryCodeStd"}}
{{range $.AllQueries .SourceName}}
{{$query := .}}
const {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{escape .SQL}}
{{$.Q}}

type {{ .MethodName }}Stmt struct {
    iter
    {{- if ne .Cmd ":exec" }}
    Row {{.Ret.DefineType}}
    {{- if eq .Cmd ":map" }}
    Key {{.Ret.KeyType}}
    {{- end }}
    {{- end }}
}

{{if .Arg.EmitStruct}}
type {{.Arg.Type}} struct { {{- range .Arg.UniqueFields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{if .Ret.EmitStruct}}
type {{.Ret.Type}} struct { {{- range .Ret.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

func (r *{{ .MethodName }}Stmt) bind(q *{{ .ReceiverType }}, {{ .Arg.Pair }}) {
    {{- $arg := .Arg }}
    query := {{.ConstantName}}
    {{- if .Arg.HasSqlcSlices }}
        {{- range .Arg.Fields }}
            {{- if .HasSqlcSlice }}
                query = strings.Replace(query, "/*SLICE:{{.Column.Name}}*/?", slicePlaceholders(len({{ .VariableForField }})), 1)
            {{- end }}
        {{- end }}
    {{- end }}

    {{- if .IsReadOnly }}
    r.init(q, "{{.MethodName}}", query, {{ .Arg.HasSqlcSlices }})
    {{- else }}
    r.init(&q.Queries, "{{.MethodName}}", query, {{ .Arg.HasSqlcSlices }})
    {{- end }}

    {{- $fields := .Arg.Fields }}
    {{- if $fields }}
    param := 1
    {{- range $fields }}
        {{- if .HasSqlcSlice }}
        for _, raw := range {{ .VariableForField }} {
            {{ $field := .WithVariable "raw" }}
            {{- template "bindField" $field }}
        }
        {{- else }}
        {
            {{- template "bindField" . }}
        }
        {{- end }}
    {{- end }}
    {{- end }}
}

func (r *{{ .MethodName }}Stmt) Next() bool {
    if !r.iter.Next() {
        return false
    }
    return r.Fetch()
}

func (r *{{ .MethodName }}Stmt) Fetch() bool {
    if r.err != nil {
        return false
    }

    {{ $fields := .Ret.Fields }}
    {{- if $fields }}
    col := 0
    {{- if eq .Cmd ":map" }}
        {{- template "fetchColumn" .Ret.KeyField }}
    {{- end }}
    {{- range $fields }}
        {{- template "fetchColumn" . }}
    {{- end }}
    {{- end }}

    return r.err == nil
}

{{if eq .Cmd ":one"}}
func (q *{{ .ReceiverType }}) {{.MethodName}}({{ .Arg.Pair }}) (result {{.Ret.DefineType}}, err *lib.Error) {
    r := &q.{{ .FieldName }}
    r.bind(q, {{ .Arg.Names }})
    defer r.reset()
    ok := r.Next()
    err = r.takeErr()
    if err != nil {
        return
    }
    if !ok {
        err = lib.WrapWithDepth(errNoRows, 3)
    } else if r.Next() {
        err = lib.WrapWithDepth(errTooManyRows, 3)
    } else {
        result = r.Row
    }
    return
}
{{end}}

{{if eq .Cmd ":many"}}
func (q *{{ .ReceiverType }}) {{.MethodName}}({{ .Arg.Pair }}) (results []{{.Ret.DefineType}}, err *lib.Error) {
    r := &q.{{ .FieldName }}
    r.bind(q, {{ .Arg.Names }})
    defer r.reset()
    for r.Next() {
        results = append(results, r.Row)
    }
    err = r.takeErr()
    if err != nil {
        results = nil
    }
    return
}
{{end}}

{{if eq .Cmd ":map"}}
func (q *{{ .ReceiverType }}) {{.MethodName}}({{ .Arg.Pair }}) (results map[{{.Ret.KeyType}}]{{.Ret.DefineType}}, err *lib.Error) {
    r := &q.{{ .FieldName }}
    r.bind(q, {{ .Arg.Names }})
    defer r.reset()
    if !r.Next() {
        err = r.takeErr()
        return
    }
    results = map[{{.Ret.KeyType}}]{{.Ret.DefineType}}{
        r.Key: r.Row,
    }
    for r.Next() {
        results[r.Key] = r.Row
    }
    err = r.takeErr()
    if err != nil {
        results = nil
    }
    return
}
{{end}}

{{if eq .Cmd ":iter"}}
func (r *{{ .MethodName }}Stmt) HasNext() bool {
    return r.iter.Next()
}

func (r *{{ .MethodName }}Stmt) Close() *lib.Error {
    err := r.takeErr()
    r.reset()
    return err
}

func (r *{{ .MethodName }}Stmt) Range() func(yield func(row {{.Ret.DefineType}}) bool) {
    return func(yield func(row {{.Ret.DefineType}}) bool) {
        defer r.reset()
        for r.Next() && yield(r.Row) {}
    }
}

func (q *{{ .ReceiverType }}) {{.MethodName}}Cursor({{ .Arg.Pair }}) *{{ .MethodName }}Stmt {
    r := &q.{{ .FieldName }}
    r.bind(q, {{ .Arg.Names }})
    return r
}

{{- range $index, $field := .Ret.Fields }}
{{- if $field.IsNullable }}
func (r *{{ $query.MethodName }}Stmt) Peek{{ $field.Name }}() {{ $field.BindType }} {
    const col = {{$index}}
    return {{ $field.FetchMethod }}(col)
}
{{- else }}
func (r *{{ $query.MethodName }}Stmt) Peek{{ $field.Name }}() (val {{ $field.BindType }}, isNull bool) {
    const col = {{$index}}
    if r.stmt.ColumnIsNull(col) {
        isNull = true
        return
    }
    val = {{ $field.FetchMethod }}(col)
    return
}
{{- end }}

func (r *{{ $query.MethodName }}Stmt) Get{{ $field.Name }}() (val {{ $field.Type }}, ok bool) {
    var raw {{ $field.BindType }}
{{- if $field.IsNullable }}
    raw = r.Peek{{ $field.Name }}()
{{- else }}
    var isNull bool
    raw, isNull = r.Peek{{ $field.Name }}()
    if isNull {
        return val, true
    }
{{- end }}
    {{- if $field.Deserialize }}
        var err *lib.Error
        val, err = {{ $field.DeserializeMethod }}(raw)
        if err != nil {
            r.setErr(err)
            return val, false
        }
    {{- else if $field.NeedsCast $field.BindType }}
        val = {{ $field.Type }}(raw)
    {{- else }}
        val = raw
    {{- end }}
    return val, true
}
{{- end }}
{{end}}

{{if eq .Cmd ":exec"}}
func (q *{{ .ReceiverType }}) {{.MethodName}}({{ .Arg.Pair }}) *lib.Error {
    r := &q.{{ .FieldName }}
    r.bind(q, {{ .Arg.Names }})
    defer r.reset()
    r.Next()
    return r.takeErr()
}
{{end}}

{{end}}
{{end}}

{{define "bindField"}}
    {{- if .EmbedFields }}
        {{- range .EmbedFields }}
            {{ template "bindField" . }}
        {{- end }}
    {{- else }}
    {{- $bindType := .BindType }}
    var v {{ $bindType }}
    {{- if and .IsPointer .IsNullable }}
    isNull := {{ .VariableForField }} == nil
    if !isNull {
    {{- else }}
    isNull := false
    {
    {{- end }}
    {{- if .Serialize }}
    {{- if eq $bindType "string" }}
        var err *lib.Error
        v, isNull, err = {{ .VariableForField }}.SerializeString()
        if err != nil {
            r.setErr(err)
        }
    {{- else if eq $bindType "bool" }}
        v, isNull = {{ .VariableForField }}.SerializeBool()
    {{- else if eq $bindType "float64" }}
        v, isNull = {{ .VariableForField }}.SerializeFloat()
    {{- else if eq $bindType "int64" }}
        v, isNull = {{ .VariableForField }}.SerializeInt()
    {{- else }}
        var err *lib.Error
        v, isNull, err = {{ .VariableForField }}.SerializeBytes()
        if err != nil {
            r.setErr(err)
        }
    {{- end }}
    {{- else if .HasLen }}
        v = {{ .VariableForField }}
        {{- if .IsNullable }}
            isNull = len(v) == 0
        {{- end }}
    {{- else }}
        {{- if eq $bindType "bool" }}
            v = {{ .VariableForField }}
        {{- else if .NeedsCast $bindType }}
            v = {{ $bindType }}({{ .VariableForField }})
        {{- else }}
            v = {{ .VariableForField }}
        {{- end }}
    {{- end }}
    }
    if isNull {
        r.stmt.BindNull(param)
    } else {
        {{ .BindMethod }}(param, v)
    }
    param++
    {{- end }}
{{end}}

{{define "fetchColumn"}}
    {{- if .EmbedFields }}
        {{- range .EmbedFields }}
            {{ template "fetchColumn" . }}
        {{- end }}
    {{- else }}
    {{- if .IsNullable }}
    if r.stmt.ColumnIsNull(col) {
        var v {{ .Type }}
        {{ .FetchInto }} = v
    } else {
    {{- else }}
    {
    {{- end }}
        raw := {{ .FetchMethod }}(col)
        {{- if .Deserialize }}
            v, err := {{ .DeserializeMethod }}(raw)
            if err != nil {
                r.setErr(err)
            }
        {{- else if .NeedsCast .BindType }}
            v := {{ .Type }}(raw)
        {{- else }}
            v := raw
        {{- end }}
        {{ .FetchInto }} = v
    }
    col++
    {{- end }}
{{end}}